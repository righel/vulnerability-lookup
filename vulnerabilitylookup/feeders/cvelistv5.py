#!/usr/bin/env python3

from __future__ import annotations

import re

import orjson
from pathlib import Path
from typing import Callable

from ..helpers import fromisoformat_wrapper

from .abstract_feeder import AbstractFeeder


class CVEListV5(AbstractFeeder):
    def __init__(self) -> None:
        super().__init__(Path(__file__).stem)

        self.init_git_repo()

    def update(self, stop: Callable[..., bool]) -> bool:
        self.git.remotes.origin.pull('main')

        paths_to_import: set[Path] = set()
        if _last_update := self.storage.hget('last_updates', self.name):
            _last_update_str = _last_update.decode()
            if _last_update_str == self.git.head.commit.hexsha:
                # No changes
                self.logger.info('No new commit.')
                return False
            for commit in self.git.iter_commits(f'{_last_update_str}...HEAD'):
                for line in self.git.git.show(commit.hexsha, name_only=True).split('\n'):
                    if not line.endswith('.json'):
                        continue
                    p_path = self.path_to_repo / Path(line)
                    if p_path.exists() and re.match(r'CVE-\d{4}-\d+.json', p_path.name):
                        paths_to_import.add(p_path)
        else:
            # First run, get all files
            for p_path in self.path_to_repo.rglob('*.json'):
                if p_path.exists() and re.match(r'CVE-\d{4}-\d+.json', p_path.name):
                    paths_to_import.add(p_path)

        if not paths_to_import:
            self.logger.info('Nothing new to import.')
            return False

        import_complete: bool = True
        p = self.storage.pipeline()
        cvelistv5ids: dict[str, float] = {}
        vuln_to_push = []
        for path in paths_to_import:
            # Store all cves individually
            with path.open() as vuln_entry:
                vuln = orjson.loads(vuln_entry.read())
                if 'dateUpdated' in vuln['cveMetadata']:
                    updated = fromisoformat_wrapper(vuln['cveMetadata']['dateUpdated'])
                elif 'datePublished' in vuln['cveMetadata']:
                    updated = fromisoformat_wrapper(vuln['cveMetadata']['datePublished'])
                else:  # 'dateReserved' in vuln['cveMetadata']:
                    updated = fromisoformat_wrapper(vuln['cveMetadata']['dateReserved'])

                vuln_id = path.stem.lower()

                cvelistv5ids[vuln_id] = updated.timestamp()
                vuln_bytes = orjson.dumps(vuln)
                vuln_to_push.append(vuln_bytes)
                p.set(vuln_id, vuln_bytes)
                if ('containers' in vuln
                        and 'cna' in vuln['containers']):
                    # Check if we have a link with another known source we can link to
                    if ('source' in vuln['containers']['cna']
                            and 'advisory' in vuln['containers']['cna']['source']):
                        advisory = vuln['containers']['cna']['source']['advisory'].lower()
                        if advisory.startswith('ghsa'):
                            # got a github security advisory.
                            p.sadd(f'{vuln_id}:link', advisory)
                            p.sadd(f"{advisory}:link", vuln_id)
                        else:
                            self.logger.debug(f"[{vuln_id}] Unknown advisory ID: {advisory}")

                    if 'affected' in vuln['containers']['cna']:
                        for affected in vuln['containers']['cna']['affected']:
                            # Load affected products
                            if 'vendor' in affected and 'product' in affected:
                                vendor = affected['vendor'].strip().lower()
                                product = affected['product'].strip().lower()
                                if not vendor or not product:
                                    # empty, or only spaces
                                    continue
                                if 'n/a' in vendor or 'n/a' in product:
                                    continue
                                p.sadd('vendors', vendor)
                                p.sadd(f'{vendor}:products', product)
                                p.sadd(f'{vendor}:vulnerabilities', vuln_id)
                                p.sadd(f'{vendor}:{product}:vulnerabilities', vuln_id)
                            else:
                                self.logger.info(f"[{vuln_id}] Missing vendor/product: {affected}")

            if len(cvelistv5ids) > 1000:
                # Avoid a massive execute on first import
                p.zadd(f'index:{self.name}', cvelistv5ids)  # type: ignore
                p.zadd('index', cvelistv5ids)  # type: ignore
                p.execute()

                # Publish the vulnerabilities
                self.publish(vuln_to_push)

                # reset pipeline
                p = self.storage.pipeline()
                cvelistv5ids = {}

                # Reset the list of vulnerabilities to push
                vuln_to_push = []

            if stop():
                self.logger.info('Shutdown requested. Stopping import.')
                import_complete = False
                break

        if cvelistv5ids:
            # remaining entries
            p.zadd(f'index:{self.name}', cvelistv5ids)  # type: ignore
            p.zadd('index', cvelistv5ids)  # type: ignore
            p.execute()

            self.publish(vuln_to_push)
            vuln_to_push = []

        if import_complete:
            self.storage.hset('last_updates', mapping={self.name: self.git.head.commit.hexsha})
            self.logger.info('Import done.')
            return True
        return False
