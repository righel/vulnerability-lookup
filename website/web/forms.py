#!/usr/bin/env python3

from urllib.parse import urlparse

import pycountry
from flask import current_app
from flask import request
from flask_wtf import FlaskForm  # type: ignore[import-untyped]
from werkzeug.exceptions import HTTPException
from werkzeug.exceptions import NotFound
from the_big_username_blacklist import validate  # type: ignore[import-untyped]
from wtforms import BooleanField  # type: ignore[import-untyped]
from wtforms import HiddenField
from wtforms import PasswordField
from wtforms import SelectField
from wtforms import StringField
from wtforms import TextAreaField
from wtforms import SubmitField
from wtforms import validators
from wtforms.fields import EmailField  # type: ignore[import-untyped]
from wtforms.validators import Email  # type: ignore[import-untyped]
from wtforms.validators import InputRequired

from website.lib.utils import is_email_in_misp_disposable_list
from website.models import User


class RedirectForm(FlaskForm):  # type: ignore[misc]
    """Redirect form used for the redirection after the sign in."""

    next = HiddenField()

    def __init__(self, *args: str, **kwargs: int) -> None:
        super().__init__(*args, **kwargs)
        if not self.next.data:
            # self.next.data = request.args.get("next") or request.referrer
            self.next.data = request.args.get("next") or "/user/profile"
        try:
            ref_url = urlparse(self.next.data)
            if ref_url.path == "/":
                self.next.data = "/user/profile"
            else:
                # Will raise an exception if no endpoint exists for the url
                adapter = current_app.create_url_adapter(request)
                adapter.match(ref_url.path)  # type: ignore
        except NotFound:
            self.next.data = "/user/profile"
        except HTTPException:
            # Any other exceptions
            pass

    @property
    def redirect_target(self) -> str:
        return self.next.data


class SignupForm(FlaskForm):  # type: ignore[misc]
    """
    Sign up form (registration).
    """

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=50),
            validators.InputRequired("Please enter your login."),
        ],
        description="Username desired.",
    )
    name = StringField(
        "Name",
        [validators.InputRequired("Your display name (firstname, lastname).")],
    )
    organisation = StringField("Organisation")
    email = EmailField(
        "Email",
        [
            validators.Length(min=6, max=256),
            validators.InputRequired("Please enter your email address."),
        ],
        description="You will receive an email in order to confirm your account.",
    )
    submit = SubmitField("Sign up", render_kw={"class": "form-control"})

    def validate(self) -> bool:
        validated = super().validate()

        if is_email_in_misp_disposable_list(self.email.data.split("@")[1]):
            self.email.errors.append(
                "Email address detected in MISP warning list of disposable email."
            )
            validated = False
        if User.query.filter(User.login == self.login.data).count():
            self.login.errors.append("Login already taken")
            validated = False
        if self.login.data != User.make_valid_login(self.login.data):
            self.login.errors.append(
                "This login has invalid characters. "
                "Please use letters, numbers, hyphens and underscores only."
            )
            validated = False
        if self.login.data != "admin" and not validate(self.login.data):
            self.login.errors.append("Username not allowed.")
            validated = False
        return validated


class LoginForm(RedirectForm):
    """Sign in form."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=50),
            validators.InputRequired("Please enter your login."),
        ],
        description="Your username.",
        render_kw={"autofocus": True},
    )
    password = PasswordField(
        "Password",
        [
            validators.InputRequired("Please enter your password."),
            validators.Length(min=3, max=500),
        ],
    )
    submit = SubmitField("Log In", render_kw={"class": "form-control"})

    def __init__(self, *args: str, **kwargs: int) -> None:
        super().__init__(*args, **kwargs)
        self.user = None

    def validate(self) -> bool:
        validated = super().validate()
        user = User.query.filter(User.login == self.login.data).first()
        if not user:
            validated = False
        else:
            if not user.is_active:
                validated = False
            if not user.is_confirmed:
                validated = False
            if not user.check_password(self.password.data):
                validated = False
            self.user = user
        if not validated:
            # intentionaly do not explain why it is impossible to login
            self.login.errors.append("Impossible to login.")
        return validated


class ProfileForm(FlaskForm):  # type: ignore[misc]
    """Edit a profile."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=30),
            validators.InputRequired("Please enter your login."),
        ],
        render_kw={"autofocus": True},
    )
    name = StringField(
        "Name",
        [validators.InputRequired("Your display name (firstname, lastname).")],
    )
    password = PasswordField("Password")
    email = EmailField(
        "Email",
        [
            InputRequired("Please enter your email address."),
            Email("Please enter your email address."),
        ],
    )
    organisation = StringField(
        "Organisation", default="", validators=[validators.Length(min=0, max=50)]
    )
    country_code = SelectField("Country")
    bio = TextAreaField(
        "Bio (link to external websites and images will be automatically removed)",
        default="",
        validators=[validators.Length(min=0, max=5000)],
    )
    webpage = StringField(
        "Webpage", default="", validators=[validators.Length(min=0, max=100)]
    )
    mastodon = StringField(
        "Mastodon", default="", validators=[validators.Length(min=0, max=100)]
    )
    github = StringField(
        "GitHub username", default="", validators=[validators.Length(min=0, max=39)]
    )
    linkedin = StringField(
        "LinkedIn username", default="", validators=[validators.Length(min=0, max=30)]
    )

    submit = SubmitField("Save")

    def __init__(self, *args: str, **kwargs: int) -> None:
        super().__init__(*args, **kwargs)
        self.country_code.choices = [("", "")]
        self.country_code.choices.extend(
            sorted(
                ((country.alpha_3, country.name) for country in pycountry.countries),
                key=lambda elem: elem[1],
            )
        )

    def validate(self) -> bool:
        validated = super().validate()
        if self.login.data != User.make_valid_login(self.login.data):
            self.login.errors.append(
                "This login has invalid characters. "
                "Please use letters, numbers, dots and underscores only."
            )
        if self.login.data != "admin" and not validate(self.login.data):
            self.login.errors.append("Username not allowed.")
            validated = False
        return validated


class AccountConfirmationForm(RedirectForm):
    """Account confirmation and recovery form."""

    password1 = PasswordField(
        "Password",
        [
            validators.InputRequired("Please enter your password."),
            validators.Length(min=20, max=500),
            validators.InputRequired(),
            validators.EqualTo("password2", message="Passwords must match."),
        ],
    )
    password2 = PasswordField(
        "Password confirmation",
        [
            validators.InputRequired("Please confirm your password."),
            validators.Length(min=20, max=500),
        ],
        description="Please confirm your password.",
    )
    submit = SubmitField("Confirm", render_kw={"class": "form-control"})


class AccountRecoveryForm(RedirectForm):
    """Account recovery form."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=30),
            validators.InputRequired("Please enter your login."),
        ],
    )
    submit = SubmitField("Recover your account", render_kw={"class": "form-control"})


class UserForm(FlaskForm):  # type: ignore[misc]
    """Create or edit a user (for the administrator)."""

    login = StringField(
        "Login",
        [
            validators.Length(min=3, max=30),
            validators.InputRequired("Please enter your login."),
        ],
        render_kw={"autofocus": True},
    )
    name = StringField(
        "Name",
        [
            validators.Length(min=3, max=50),
            validators.InputRequired("Your display name (firstname, lastname)."),
        ],
    )
    organisation = StringField(
        "Organisation", validators=[validators.Length(min=0, max=50)]
    )
    password = PasswordField("Password")
    email = EmailField(
        "Email",
        [
            InputRequired("Please enter your email address."),
            Email("Please enter your email address."),
        ],
    )

    country_code = SelectField("Country")
    bio = TextAreaField(
        "Bio (link to external websites and images will be automatically removed)",
        default="",
        validators=[validators.Length(min=0, max=500)],
    )
    webpage = StringField(
        "Webpage", default="", validators=[validators.Length(min=0, max=100)]
    )
    mastodon = StringField(
        "Mastodon", default="", validators=[validators.Length(min=0, max=100)]
    )
    github = StringField(
        "GitHub username", default="", validators=[validators.Length(min=0, max=39)]
    )
    linkedin = StringField(
        "LinkedIn username", default="", validators=[validators.Length(min=0, max=30)]
    )

    is_active = BooleanField("Active", default=True)
    is_confirmed = BooleanField("Confirmed", default=True)
    is_admin = BooleanField("Admin", default=False)
    is_commenter = BooleanField("Commenter", default=False)
    is_reporter = BooleanField("Reporter", default=False)
    submit = SubmitField("Save")

    def __init__(self, *args: str, **kwargs: int) -> None:
        super().__init__(*args, **kwargs)
        self.country_code.choices = [("", "")]
        self.country_code.choices.extend(
            sorted(
                ((country.alpha_3, country.name) for country in pycountry.countries),
                key=lambda elem: elem[1],
            )
        )

    def validate(self) -> bool:
        validated = super().validate()
        if self.login.data != User.make_valid_login(self.login.data):
            self.login.errors.append(
                "This login has invalid characters. "
                "Please use letters, numbers, dots and underscores only."
            )
        if self.login.data != "admin" and not validate(self.login.data):
            self.login.errors.append("Username not allowed.")
            validated = False
        return validated


class TwoFactorForm(FlaskForm):  # type: ignore[misc]
    otp = StringField(
        "Enter OTP",
        validators=[
            InputRequired("Please enter the OTP from your device."),
            validators.Length(min=6, max=6),
        ],
        description="Please enter the OTP from your device.",
    )
    submit = SubmitField("Verify", render_kw={"class": "form-control"})
