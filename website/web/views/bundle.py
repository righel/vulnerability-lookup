#!/usr/bin/env python3

from datetime import timezone

import markdown  # type: ignore[import-untyped]
from markdown.extensions.tables import TableExtension  # type: ignore[import-untyped]
from feedgen.feed import FeedGenerator  # type: ignore[import-untyped]
from flask import (
    abort,
    Blueprint,
    request,
    render_template,
    make_response,
    Response,
    url_for,
)
from flask_paginate import get_page_args  # type: ignore[import-untyped]

from vulnerabilitylookup.default import get_config
from website.models import Bundle
from website.web.bootstrap import application

bundle_bp = Blueprint(
    "bundle_bp", __name__, url_prefix="/bundle", template_folder="bundles"
)
bundles_bp = Blueprint(
    "bundles_bp", __name__, url_prefix="/bundles", template_folder="bundles"
)

local_instance_name = get_config("generic", "local_instance_name").lower()


@bundles_bp.route("/", methods=["GET"])
def list_bundles() -> str:
    return render_template("bundles/bundles.html")


@bundle_bp.route("/<uuid:bundle_uuid>", methods=["GET"])
def get(bundle_uuid: str = "") -> str:
    """Return details about the bundle."""
    elem = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    if elem is None:
        abort(404)
    html_from_markdown = markdown.markdown(
        elem.description,
        extensions=["fenced_code", TableExtension(use_align_attribute=True)],
    )
    return render_template(
        "bundles/bundle.html", bundle=elem, description=html_from_markdown
    )


@bundles_bp.route("/feed.<string:format>", defaults={"per_page": 10}, methods=["GET"])
def feed_bundles(per_page: int = 10, format: str = "atom") -> Response:
    """RSS/ATOM feed for the recent bundles."""
    user = request.args.get("user", "")
    public_domain = get_config("generic", "public_domain")
    _, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    feed_max_per_page = application.config.get("FEED_MAX_PER_PAGE", 50)
    if per_page > feed_max_per_page:
        per_page = feed_max_per_page
    fg = FeedGenerator()
    fg.id(f"https://{public_domain}/bundles/feed.{format}")
    fg.title(f"Most recent bundles.")
    fg.subtitle(f"Contains only the most {per_page} recent bundles.")
    fg.author(
        {
            "name": "Vulnerability Lookup",
            "email": application.config.get("ADMIN_EMAIL", ""),
        }
    )
    fg.link(href=f"https://{public_domain}", rel="alternate")
    fg.language("en")

    query = Bundle.query
    if user:
        query = query.filter(Bundle.author.has(login=user))
    query = query.order_by(Bundle.timestamp.desc())
    bundles = query.offset(offset).limit(per_page)

    for bundle in bundles:
        fe = fg.add_entry()
        fe.author(
            [
                {
                    "name": bundle.author.name,
                    "uri": url_for(
                        "user_bp.profile", login=bundle.author.login, _external=True
                    ),
                }
            ]
        )
        fe.id(f"https://{public_domain}/bundle/{bundle.uuid}")
        fe.title(bundle.name)
        fe.link(href=f"https://{public_domain}/bundle/{bundle.uuid}")
        fe.content(bundle.description)
        fe.description(bundle.description)
        fe.published(bundle.timestamp.replace(tzinfo=timezone.utc))
    if format == "atom":
        feed = fg.atom_str(pretty=True)
    else:
        feed = make_response(fg.rss_str(pretty=True))
        feed.mimetype = "application/rss+xml"
        feed.headers["Content-Type"] = "application/rss+xml"
    return feed
