#!/usr/bin/env python3

from io import BytesIO
from uuid import UUID

from flask import abort
from flask import Blueprint
from flask import jsonify
from flask import render_template
from flask import request
from flask import send_file
from flask_paginate import get_page_args  # type: ignore[import-untyped]
from flask_paginate import get_parameter
from flask_paginate import Pagination
from sqlalchemy import or_
from werkzeug import Response as WerkzeugResponse

from website.models import Sighting


sightings_bp = Blueprint(
    "sightings_bp", __name__, url_prefix="/sightings", template_folder="sightings"
)

sighting_bp = Blueprint(
    "sighting_bp", __name__, url_prefix="/sighting", template_folder="sightings"
)


@sightings_bp.route("/", methods=["GET"])
def list_sightings() -> str:
    sighting_query = request.args.get("query", "")
    sightings = Sighting.query
    if sighting_query:
        try:
            uuid_obj = UUID(sighting_query)
        except Exception:
            uuid_obj = None
        if uuid_obj:
            sightings = sightings.filter(
                or_(
                    Sighting.uuid == uuid_obj,
                    Sighting.type == sighting_query,
                    Sighting.author.has(login=sighting_query),
                )
            )
        else:
            sightings = sightings.filter(
                or_(
                    Sighting.type == sighting_query,
                    Sighting.author.has(login=sighting_query),
                )
            )
    sightings = sightings.order_by(Sighting.creation_timestamp.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    page_name = get_parameter()
    per_page_name = get_parameter(default="per_page")
    pagination = Pagination(
        total=sightings.count(),
        record_name="sightings",
        css_framework="bootstrap5",
        **{page_name: page, per_page_name: per_page},
    )
    sightings = sightings.offset(offset).limit(per_page)

    return render_template(
        "sightings/sightings.html",
        sightings=sightings,
        pagination=pagination,
    )


@sighting_bp.route("/<uuid:sighting_uuid>/export", methods=["GET"])
def get(sighting_uuid: str = "") -> WerkzeugResponse:
    """Return the sighting as a JSON file."""
    elem = Sighting.query.filter(Sighting.uuid == sighting_uuid).first()
    if elem is None:
        abort(404)
    buffer = BytesIO()
    buffer.write(elem.as_json().encode("utf-8"))
    buffer.seek(0)  # Move to the beginning of the file-like object

    # Use send_file to return the file-like object as an attachment
    return send_file(
        buffer,
        as_attachment=True,
        download_name=f"{sighting_uuid}.json",
        mimetype="application/json",
    )
