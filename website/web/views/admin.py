#!/usr/bin/env python3

from datetime import datetime
from datetime import timedelta
from datetime import timezone
from uuid import UUID

from flask import abort
from flask import Blueprint
from flask import flash
from flask import jsonify
from flask import redirect
from flask import render_template
from flask import request
from flask import url_for
from flask_login import current_user  # type: ignore[import-untyped]
from flask_login import login_required
from flask_paginate import get_page_args  # type: ignore[import-untyped]
from flask_paginate import get_parameter
from flask_paginate import Pagination
from sqlalchemy import delete
from sqlalchemy import or_
from werkzeug import Response as WerkzeugResponse
from werkzeug.security import generate_password_hash

from vulnerabilitylookup.default import get_config
from vulnerabilitylookup.default import get_homedir
from website.models import User, Comment, Bundle, Sighting
from website.lib.utils import exec_cmd_no_wait
from website.web.bootstrap import db
from website.web.bootstrap import vulnerabilitylookup
from website.web.forms import UserForm
from website.web.permissions import admin_permission


admin_bp = Blueprint("admin_bp", __name__, url_prefix="/admin")


@admin_bp.route("/")
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def index() -> WerkzeugResponse:
    """Redirects (HTTP 302) the user to the admin dashboard."""
    return redirect(url_for("admin_bp.dashboard"))


@admin_bp.route("/dashboard", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def dashboard() -> str:
    """Returns a dashboard with various settings of the instance."""
    now = datetime.now(timezone.utc)
    on_week_ago = now - timedelta(weeks=1)
    active_users = User.query.filter(User.last_seen >= on_week_ago).order_by(
        User.last_seen.desc()
    )
    return render_template(
        "admin/dashboard.html",
        users=active_users,
        nb_users=User.query.count(),
        nb_comments=Comment.query.count(),
        nb_bundles=Bundle.query.count(),
        nb_sightings=Sighting.query.count(),
        local_instance_uuid=get_config("generic", "local_instance_uuid"),
        local_instance_name=get_config("generic", "local_instance_name"),
        storage_info=vulnerabilitylookup.get_info(),
    )


@admin_bp.route("/command/backup_database", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def backup_database() -> WerkzeugResponse:
    exec_cmd_no_wait("poetry run flask --app website.app db_backup")
    return jsonify({"message": "Command executed."})


@admin_bp.route("/command/update_warninglists", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def update_warninglists() -> WerkzeugResponse:
    exec_cmd_no_wait("poetry run flask --app website.app update_warninglists")
    return jsonify({"message": "Command executed."})


@admin_bp.route("/command/dump_feeds", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def dump_feeds() -> WerkzeugResponse:
    exec_cmd_no_wait("poetry run dump --all")
    return jsonify({"message": "Command executed."})


@admin_bp.route("/command/dump_sightings", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def dump_sightings() -> WerkzeugResponse:
    exec_cmd_no_wait("poetry run dump --sightings")
    return jsonify({"message": "Command executed."})


@admin_bp.route("/command/update_documentation", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def update_documentation() -> WerkzeugResponse:
    cwd = get_homedir().joinpath("docs/").absolute().as_posix()
    exec_cmd_no_wait("poetry install --only docs")
    exec_cmd_no_wait("poetry run make html", cwd=cwd)
    return jsonify({"message": "Command executed."})


#
# Users
#


@admin_bp.route("/users", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_users() -> str:
    user_query = request.args.get("query", "")
    request_sort = request.args.get("sort", "")
    request_is_admin = request.args.get("is_admin", "")
    request_is_active = request.args.get("is_active", "")
    request_is_confirmed = request.args.get("is_confirmed", "")
    request_is_2fa_active = request.args.get("is_2fa_active", "")
    request_permission = request.args.get("permission", "")
    request_country = request.args.get("country", "")
    request_organisation = request.args.get("organisation", "")

    total_nb_users = User.query.count()
    nb_admins = User.query.filter(User.is_admin == True).count()
    nb_users_without_2fa = User.query.filter(
        User.is_two_factor_authentication_enabled == False
    ).count()
    nb_users_not_confirmed = User.query.filter(User.is_confirmed == False).count()
    nb_users_not_active = User.query.filter(User.is_active == False).count()

    # Load normal users and configure the associated pagination element
    users = User.query
    if user_query:
        users = users.filter(
            or_(
                User.login.ilike("%" + user_query + "%"),
                User.name.ilike("%" + user_query + "%"),
                User.email.ilike("%" + user_query + "%"),
                User.organisation.ilike("%" + user_query + "%"),
                User.country_code.ilike("%" + user_query + "%"),
            )
        )
    if request_is_admin == "1":
        users = users.filter(User.is_admin == True)
    if request_is_active == "0":
        users = users.filter(User.is_active == False)
    if request_is_confirmed == "0":
        users = users.filter(User.is_confirmed == False)
    if request_is_2fa_active == "0":
        users = users.filter(User.is_two_factor_authentication_enabled == False)
    match request_permission:
        case "A":
            users = users.filter(User.is_admin)
        case "C":
            users = users.filter(User.is_commenter)
        case "R":
            users = users.filter(User.is_reporter)
        case _:
            pass
    if request_country:
        users = users.filter(User.country_code == request_country)
    if request_organisation:
        users = users.filter(User.organisation == request_organisation)
    match request_sort:
        case "last_seen":
            users = users.order_by(User.last_seen.desc())
        case "member_since":
            users = users.order_by(User.created_at.desc())
        case "organisation":
            users = users.order_by(User.organisation.desc())
        case _:
            users = users.order_by(User.last_seen.desc())

    # Pagination
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    page_name = get_parameter()
    per_page_name = get_parameter(default="per_page")
    pagination = Pagination(
        total=users.count(),
        record_name="users",
        css_framework="bootstrap5",
        **{page_name: page, per_page_name: per_page},
    )
    users = users.offset(offset).limit(per_page)

    return render_template(
        "admin/users.html",
        total_nb_users=total_nb_users,
        nb_admins=nb_admins,
        nb_users_without_2fa=nb_users_without_2fa,
        nb_users_not_confirmed=nb_users_not_confirmed,
        nb_users_not_active=nb_users_not_active,
        users=users,
        pagination=pagination,
    )


@admin_bp.route("/user/create", methods=["GET"])
@admin_bp.route("/user/edit/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def form_user(user_id: int = 0) -> str:
    """Return a form to create and edit a user."""
    action = "Create a user"
    head_titles = [action]
    form = UserForm()
    if user_id == 0:
        return render_template(
            "admin/edit_user.html", action=action, head_titles=head_titles, form=form
        )

    user = User.query.filter(User.id == user_id).first()
    form = UserForm(obj=user)
    action = f"Edit user {user.login}"
    head_titles = [action]
    head_titles.append(user.login)
    return render_template(
        "admin/edit_user.html",
        action=action,
        head_titles=head_titles,
        form=form,
        user=user,
    )


@admin_bp.route("/user/create", methods=["POST"])
@admin_bp.route("/user/edit/<int:user_id>", methods=["POST"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def process_user_form(user_id: int = 0) -> str | WerkzeugResponse:
    """Edit a user."""
    form = UserForm()

    if not form.validate():
        return render_template("admin/edit_user.html", form=form)

    if user_id != 0:
        user = User.query.filter(User.id == user_id).first()
        try:
            form.populate_obj(user)
        except AssertionError as e:
            flash(f"{e}", "danger")
            return render_template("admin/edit_user.html", form=form)
        if form.password.data:
            user.pwdhash = generate_password_hash(form.password.data)
        db.session.commit()
        flash(
            f"User {form.login.data} successfully updated.",
            "success",
        )
        return redirect(url_for("admin_bp.form_user", user_id=user.id))

    # Create a new user
    try:
        new_user = User(
            login=form.login.data,
            email=form.email.data,
            name=form.name.data,
            organisation=form.organisation.data,
            is_active=form.is_active.data,
            is_confirmed=form.is_confirmed.data,
            is_admin=form.is_admin.data,
            pwdhash=generate_password_hash(form.password.data),
            last_seen=None,
        )
    except AssertionError as e:
        flash(f"{e}", "danger")
        return render_template("admin/edit_user.html", form=form)
    db.session.add(new_user)
    db.session.commit()
    flash(
        f"User {new_user.login} successfully created.",
        "success",
    )
    return redirect(url_for("admin_bp.form_user", user_id=new_user.id))


@admin_bp.route("/user/toggle/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def toggle_user(user_id: int) -> WerkzeugResponse:
    """Activate/deactivate a user."""
    user = User.query.filter(User.id == user_id).first()
    if user.id == current_user.id:
        flash("You can not do this change to your own user.", "danger")
    else:
        user.is_active = not user.is_active
        db.session.commit()
        flash(
            "User {status}.".format(
                status="activated" if user.is_active else "deactivated"
            ),
            "success",
        )
    return redirect(url_for("admin_bp.list_users"))


@admin_bp.route("/user/reset-2fa/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def reset_two_factor_auth(user_id: int) -> WerkzeugResponse:
    """Reset two factor authentication for a user."""
    user = User.query.filter(User.id == user_id).first()
    if user.id == current_user.id:
        flash("You can not do this change to your own user.", "danger")
    else:
        user.is_two_factor_authentication_enabled = False
        user.secret_token = None
        db.session.commit()
        flash("Two-Factor Authentication resetted.", "success")
    return redirect(url_for("admin_bp.list_users"))


@admin_bp.route("/user/delete/<int:user_id>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_user(user_id: int) -> WerkzeugResponse:
    """Delete the user corresponding to the id given in parameter."""
    user = User.query.filter(User.id == user_id).first()
    if user is None:
        abort(404)

    if user.id == current_user.id:
        flash("You can not delete your own user.", "danger")
    else:
        # Delete contributed comments
        statement = delete(Comment).where(Comment.author_id == user_id)
        db.session.execute(statement)
        # Delete contributed bundles
        statement = delete(Bundle).where(Bundle.author_id == user_id)
        db.session.execute(statement)
        # Delete the user
        db.session.delete(user)
        db.session.commit()
        flash("User deleted.", "success")

    return redirect(url_for("admin_bp.list_users"))


#
# Comments
#


@admin_bp.route("/comments", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_comments() -> str:
    comment_query = request.args.get("query", "")
    comments = Comment.query
    if comment_query:
        comments = comments.filter(
            or_(
                Comment.title.ilike("%" + comment_query + "%"),
                Comment.description.ilike("%" + comment_query + "%"),
                Comment.author.has(name=comment_query),
            )
        )
    comments = comments.order_by(Comment.timestamp.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    page_name = get_parameter()
    per_page_name = get_parameter(default="per_page")
    pagination = Pagination(
        total=comments.count(),
        record_name="comments",
        css_framework="bootstrap5",
        **{page_name: page, per_page_name: per_page},
    )
    comments = comments.offset(offset).limit(per_page)
    return render_template(
        "admin/comments.html", comments=comments, pagination=pagination
    )


@admin_bp.route("/comment/<uuid:comment_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def view_comment(comment_uuid: str) -> str:
    comment = Comment.query.filter(Comment.uuid == comment_uuid).first()
    if comment is None:
        abort(404)
    return render_template("admin/view_comment.html", comment=comment)


@admin_bp.route("/comment/toggle/<uuid:comment_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def toggle_comment(comment_uuid: str) -> WerkzeugResponse:
    """Publish/Unpublish a comment."""
    comment = Comment.query.filter(Comment.uuid == comment_uuid).first()
    if comment is None:
        abort(404)
    comment.is_published = not comment.is_published
    db.session.commit()
    flash(
        "Comment {status}.".format(
            status="published" if comment.is_published else "unpublished"
        ),
        "success",
    )
    return redirect(url_for("admin_bp.list_comments"))


@admin_bp.route("/comment/delete/<uuid:comment_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_comment(comment_uuid: str) -> WerkzeugResponse:
    """Delete a comment."""
    comment = Comment.query.filter(Comment.uuid == comment_uuid).first()
    if comment is None:
        abort(404)
    db.session.delete(comment)
    db.session.commit()
    flash("Comment deleted.", "success")
    return redirect(url_for("admin_bp.list_comments"))


#
# Bundles
#


@admin_bp.route("/bundles", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_bundles() -> str:
    bundle_query = request.args.get("query", "")
    bundles = Bundle.query
    if bundle_query:
        bundles = bundles.filter(
            or_(
                Bundle.name.ilike("%" + bundle_query + "%"),
                Bundle.description.ilike("%" + bundle_query + "%"),
                Bundle.author.has(name=bundle_query),
            )
        )
    bundles = bundles.order_by(Bundle.timestamp.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    page_name = get_parameter()
    per_page_name = get_parameter(default="per_page")
    pagination = Pagination(
        total=bundles.count(),
        record_name="bundles",
        css_framework="bootstrap5",
        **{page_name: page, per_page_name: per_page},
    )
    bundles = bundles.offset(offset).limit(per_page)

    return render_template(
        "admin/bundles.html",
        bundles=bundles,
        pagination=pagination,
    )


@admin_bp.route("/bundle/create", methods=["GET"])
@admin_bp.route("/bundle/edit/<uuid:bundle_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def form_bundle(bundle_uuid: str = "") -> str:
    """Returns a page in order to create or edit a bundle.
    Only available to administrators."""
    action = "Create a bundle"
    head_titles = [action]

    if not bundle_uuid:
        # Creation of a new bundle
        return render_template(
            "admin/edit_bundle.html",
            action=action,
            head_titles=head_titles,
            bundle={},
        )

    # Edition of an existing bundle
    bundle = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    action = "Edit a bundle"
    head_titles = [action]
    head_titles.append(bundle.name)
    return render_template(
        "admin/edit_bundle.html",
        action=action,
        head_titles=head_titles,
        bundle=bundle,
    )


@admin_bp.route("/bundle/delete/<uuid:bundle_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_bundle(bundle_uuid: str) -> WerkzeugResponse:
    """Delete a bundle."""
    bundle = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    if bundle is None:
        abort(404)
    db.session.delete(bundle)
    db.session.commit()
    flash("Bundle deleted.", "success")
    return redirect(url_for("admin_bp.list_bundles"))


#
# Sightings
#


@admin_bp.route("/sightings", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def list_sightings() -> str:
    sighting_query = request.args.get("query", "")
    sightings = Sighting.query
    if sighting_query:
        try:
            uuid_obj = UUID(sighting_query)
        except Exception:
            uuid_obj = None
        if uuid_obj:
            sightings = sightings.filter(
                or_(
                    Sighting.uuid == uuid_obj,
                    Sighting.type == sighting_query,
                    Sighting.source.ilike("%" + sighting_query + "%"),
                    Sighting.vulnerability.ilike("%" + sighting_query + "%"),
                    Sighting.author.has(login=sighting_query),
                )
            )
        else:
            sightings = sightings.filter(
                or_(
                    Sighting.type == sighting_query,
                    Sighting.source.ilike("%" + sighting_query + "%"),
                    Sighting.vulnerability.ilike("%" + sighting_query + "%"),
                    Sighting.author.has(login=sighting_query),
                )
            )
    sightings = sightings.order_by(Sighting.creation_timestamp.desc())
    page, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    page_name = get_parameter()
    per_page_name = get_parameter(default="per_page")
    pagination = Pagination(
        total=sightings.count(),
        record_name="sightings",
        css_framework="bootstrap5",
        **{page_name: page, per_page_name: per_page},
    )
    sightings = sightings.offset(offset).limit(per_page)

    return render_template(
        "admin/sightings.html",
        sightings=sightings,
        pagination=pagination,
    )


@admin_bp.route("/sightings/<uuid:sighting_uuid>/delete", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_sighting(sighting_uuid: str = "") -> WerkzeugResponse:
    """Allow administrators to delete any sightings."""
    sighting = Sighting.query.filter(Sighting.uuid == sighting_uuid).first()
    if sighting is None:
        abort(404)
    db.session.delete(sighting)
    db.session.commit()
    flash("Sighting deleted.", "success")
    return redirect(url_for("admin_bp.list_sightings"))
