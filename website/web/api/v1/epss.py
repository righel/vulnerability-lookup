from typing import Any
from typing import Tuple

import logging
import requests
from flask_restx import Namespace  # type: ignore[import-untyped]
from flask_restx import Resource

from website.web.api.v1.types import ResultType

logger = logging.getLogger(__name__)

epss_ns = Namespace("epss", description="EPSS related operations")


@epss_ns.route("/epss/<string:vulnerability_id>")
class EPSSItem(Resource):  # type: ignore[misc]
    @epss_ns.doc(description="Experimental - Get the EPSS score of a vulnerability.")  # type: ignore[misc]
    @epss_ns.doc(
        responses={
            200: "Success.",
            404: "Problem when retrieving EPSS.",
        }
    )  # type: ignore[misc]
    def get(self, vulnerability_id: str) -> Tuple[dict[Any, Any], int]:
        # In the future this will come from our backend
        # and not directly from the API of FIRST.
        # And ideally with a model trained on our data set.
        url_api = "https://api.first.org/data/v1/epss?"
        query = {}
        query["scope"] = "time-series"
        query["cve"] = vulnerability_id.upper()
        try:
            r = requests.get(url_api, params=query, timeout=300)
            # r.raise_for_status()
        except Exception as e:
            return {"message": e}, 404
        try:
            epss_value = r.json()
        except Exception:
            return {"message": "Bad content."}, 404
        return epss_value, 200
