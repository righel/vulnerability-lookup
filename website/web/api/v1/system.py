from typing import Any

import logging
from flask_restx import Namespace  # type: ignore[import-untyped]
from flask_restx import Resource

from vulnerabilitylookup import __version__
from vulnerabilitylookup.default import get_config
from website.web.bootstrap import application
from website.web.bootstrap import vulnerabilitylookup


logger = logging.getLogger(__name__)

local_instance_name = get_config("generic", "local_instance_name").lower()
local_instance_vulnid_pattern = get_config("generic", "local_instance_vulnid_pattern")

system_ns = Namespace(
    "system",
    description="Endpoints for retrieving various information about the system's status.",
)
system_ns_legacy = Namespace("system_legacy", doc=False)


@system_ns.route("/redis_up")
@system_ns.route(
    "/redis_up",
    doc={
        "description": "Alias for /api/sytem/redis_up",
        "deprecated": True,
    },
)
@system_ns.doc(description="Check if redis is up and running")
class RedisUp(Resource):  # type: ignore[misc]
    def get(self) -> bool:
        return vulnerabilitylookup.check_redis_up()


@system_ns.route("/dbInfo")
@system_ns.doc(
    description="Get more information about the current databases in use and when it was updated"
)
@system_ns_legacy.route("/dbInfo", doc=False)
class Info(Resource):  # type: ignore[misc]
    def get(self) -> dict[str, Any]:
        return vulnerabilitylookup.get_info()


@system_ns.route("/configInfo")
@system_ns.doc(
    description="Get non-sensitive information about the configuration of the system."
)
class ConfigInfo(Resource):  # type: ignore[misc]
    def get(self) -> dict[str, Any]:
        return {
            "user_accounts": get_config("generic", "user_accounts"),
            "local_instance_uuid": get_config("generic", "local_instance_uuid"),
            "registration": application.config["SELF_REGISTRATION"],
            "moderation": application.config["COMMENTS_MODERATION"],
            "software_version": __version__,
        }
