import json
import uuid
from typing import Any
from sqlalchemy import func
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import validates

from website.web.bootstrap import db


class Sighting(db.Model):  # type: ignore[name-defined, misc]
    """Represent a sighting related to a comment of to a vulnerability."""

    uuid = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_lookup_origin = db.Column(UUID(as_uuid=True), nullable=False)
    creation_timestamp = db.Column(
        db.DateTime(timezone=True), server_default=func.now(), nullable=False
    )
    type = db.Column(db.String(), nullable=False)

    # foreign keys
    author_id = db.Column(db.Integer(), db.ForeignKey("user.id"), nullable=False)
    comment_uuid = db.Column(UUID(as_uuid=True), db.ForeignKey("comment.uuid"), nullable=True)
    vulnerability = db.Column(db.String(), nullable=True)

    @validates("type")
    def validates_title(self, key: str, value: str) -> str:
        assert value in ["sighting", "false-positive", "expiration"], AssertionError("Unsopperted sighting type.")
        return value

    def as_json(self) -> str:
        return json.dumps(
            {
                "uuid": str(self.uuid),
                "vulnerability_lookup_origin": str(self.vulnerability_lookup_origin),
                "author": str(self.author_id),
                "vulnerability": self.vulnerability,
                "comment": self.comment_uuid,
                "type": self.type,
                "creation_timestamp": self.creation_timestamp.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ"
                ),
            }
        )

    def to_dict(self) -> dict[str, Any]:
        return json.loads(self.as_json())
