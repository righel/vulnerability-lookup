from typing import Any

import json
import uuid
from datetime import datetime, timezone

from sqlalchemy import func
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.event import listens_for
from sqlalchemy.inspection import inspect
from sqlalchemy.orm import Mapper
from sqlalchemy.engine import Connection
from sqlalchemy.orm import validates

from vulnerabilitylookup.default import get_config
from website.web.bootstrap import db
from website.web.bootstrap import vulnerabilitylookup


class Sighting(db.Model):  # type: ignore[name-defined, misc]
    """Represent a sighting related to a vulnerability.
    A sighting is an personal observation from a user.
    Type of sightings:
     - Seen: The vulnerability was mentioned, discussed, or seen somewhere by the user.
     - Exploited: This vulnerability was exploited and seen by the user reporting the sighting.
     - Not exploited: This vulnerability was not exploited or seen by the user reporting the sighting.
     - Confirmed: The vulnerability is confirmed from an analyst perspective.
     - Not confirmed: The user expresses doubt about the veracity of the vulnerability.
     - Patched: This vulnerability was successfully patched by the user reporting the sighting.
     - Not patched: This vulnerability was not successfully patched by the user reporting the sighting.
    """

    uuid = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_lookup_origin = db.Column(UUID(as_uuid=True), nullable=False)
    vulnerability = db.Column(db.String(), nullable=True)
    type = db.Column(db.String(), nullable=False)
    source = db.Column(db.String(2048), default="")
    creation_timestamp = db.Column(
        db.DateTime(timezone=True),
        server_default=func.now(),
        nullable=False,
        index=True,
    )

    # foreign keys
    author_id = db.Column(db.Integer(), db.ForeignKey("user.id"), nullable=False)

    @validates("type")
    def validates_title(self, key: str, value: str) -> str:
        assert value in [
            "seen",
            "exploited",
            "not-exploited",
            "confirmed",
            "not-confirmed",
            "patched",
            "not-patched",
        ], AssertionError("Unsupported sighting type.")
        return value

    def as_json(self) -> str:
        return json.dumps(
            {
                "uuid": str(self.uuid),
                "vulnerability_lookup_origin": str(self.vulnerability_lookup_origin),
                "author": str(self.author.uuid),
                "vulnerability": self.vulnerability,
                "type": self.type,
                "source": self.source,
                "creation_timestamp": self.creation_timestamp.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ"
                ),
            }
        )

    def to_dict(self) -> dict[str, Any]:
        return json.loads(self.as_json())


@listens_for(Sighting, "after_insert")
def publish_to_redis(mapper: Mapper, connection: Connection, target: Any) -> None:  # type: ignore[type-arg]
    """
    Called after a new Sighting instance is inserted into the database.
    """
    # Convert the object to a dictionary or JSON string
    message = {
        "payload": {
            column.key: getattr(target, column.key)
            for column in inspect(target).mapper.column_attrs
        },
        "instance_uuid": get_config("generic", "local_instance_uuid").lower(),
        "timestamp": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
    }
    # Publish to a Redis channel
    vulnerabilitylookup.redis_client.publish("sigthing", json.dumps(message))
