from typing import Any

import json
import uuid
from typing import Any

from sqlalchemy import func
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.orm import validates

from website.web.bootstrap import db
from website.web.bootstrap import vulnerabilitylookup


class Bundle(db.Model):  # type: ignore[name-defined, misc]
    """Represent a bundle."""

    uuid = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_lookup_origin = db.Column(UUID(as_uuid=True), nullable=False)
    name = db.Column(db.String(), nullable=False)
    description = db.Column(db.String(), nullable=False)
    description_format = db.Column(db.String(), default="markdown")
    creation_timestamp = db.Column(
        db.DateTime(timezone=True), server_default=func.now(), nullable=False
    )
    timestamp = db.Column(
        db.DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False,
    )
    related_vulnerabilities = db.Column(JSONB, default=[])
    meta = db.Column(JSONB, default={})

    # foreign keys
    author_id = db.Column(db.Integer(), db.ForeignKey("user.id"), nullable=False)

    @validates("name")
    def validates_name(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 256, AssertionError("Maximum length for name: 256")
        value = value.strip()
        return value

    @validates("description_format")
    def validates_description_format(self, key: str, value: str) -> str:
        assert value.lower() in ["markdown", "text"], AssertionError(
            "value must be 'markdown' or 'text'."
        )
        return value.lower()

    def as_json(self) -> str:
        return json.dumps(
            {
                "uuid": str(self.uuid),
                "vulnerability_lookup_origin": str(self.vulnerability_lookup_origin),
                "name": self.name,
                "description": self.description,
                "description_format": self.description_format,
                "creation_timestamp": self.creation_timestamp.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ"
                ),
                "timestamp": self.timestamp.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
                "related_vulnerabilities": self.related_vulnerabilities,
                "meta": self.meta,
            },
            indent=2,
        )

    def to_dict(self) -> dict[str, Any]:
        return json.loads(self.as_json())
