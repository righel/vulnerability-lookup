from typing import Any

import json
import uuid
from datetime import datetime, timezone

from sqlalchemy import func
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy.event import listens_for
from sqlalchemy.inspection import inspect
from sqlalchemy.orm import Mapper
from sqlalchemy.engine import Connection
from sqlalchemy.orm import validates

from website.web.bootstrap import db
from website.web.bootstrap import vulnerabilitylookup


class Comment(db.Model):  # type: ignore[name-defined, misc]
    """Represent a comment related to a security advisory (vulnerability)."""

    uuid = db.Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    vulnerability_lookup_origin = db.Column(UUID(as_uuid=True), nullable=False)
    creation_timestamp = db.Column(
        db.DateTime(timezone=True), server_default=func.now(), nullable=False
    )
    timestamp = db.Column(
        db.DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False,
    )
    title = db.Column(db.String(), nullable=False)
    description = db.Column(db.String(), nullable=False)
    description_format = db.Column(db.String(), default="markdown")
    vulnerability = db.Column(db.String(), nullable=False)
    related_vulnerabilities = db.Column(JSONB, default=[])
    meta = db.Column(JSONB, default={})

    is_published = db.Column(db.Boolean(), default=True)

    # foreign keys
    author_id = db.Column(db.Integer(), db.ForeignKey("user.id"), nullable=False)

    @validates("title")
    def validates_title(self, key: str, value: str) -> str:
        assert 3 <= len(value) <= 256, AssertionError("Maximum length for title: 256")
        value = value.strip()
        return value

    @validates("description_format")
    def validates_description_format(self, key: str, value: str) -> str:
        assert value.lower() in ["markdown", "text"], AssertionError(
            "value must be 'markdown' or 'text'."
        )
        return value.lower()

    def as_json(self) -> str:
        return json.dumps(
            {
                "uuid": str(self.uuid),
                "vulnerability_lookup_origin": str(self.vulnerability_lookup_origin),
                "title": self.title,
                "description": self.description,
                "description_format": self.description_format,
                "creation_timestamp": self.creation_timestamp.strftime(
                    "%Y-%m-%dT%H:%M:%S.%fZ"
                ),
                "timestamp": self.timestamp.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
                "related_vulnerabilities": self.related_vulnerabilities,
                "meta": self.meta,
            }
        )

    def to_dict(self) -> dict[str, Any]:
        return json.loads(self.as_json())


@listens_for(Comment, "after_insert")
def publish_to_redis(mapper: Mapper, connection: Connection, target: Any) -> None:
    """
    Called after a new Comment instance is inserted into the database.
    """
    # Convert the object to a dictionary or JSON string
    message = {
        "payload": {
            column.key: getattr(target, column.key)
            for column in inspect(target).mapper.column_attrs
        },
        "timestamp": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
    }
    # Publish to a Redis channel
    vulnerabilitylookup.redis_client.publish("comment", json.dumps(message))
