[tool.poetry]
name = "vulnerabilitylookup"
version = "2.2.0"
description = "Vulnerability-Lookup facilitates quick correlation of vulnerabilities from various sources, independent of vulnerability IDs, and streamlines the management of Coordinated Vulnerability Disclosure (CVD)."
authors = ["Alexandre Dulaunoy <alexandre.dulaunoy@circl.lu>", "Raphaël Vinot <raphael.vinot@circl.lu>", "Cédric Bonhomme <cedric.bonhomme@circl.lu>"]
license = "AGPL-3.0-or-later"
readme = "README.md"
homepage = "https://github.com/cve-search/vulnerability-lookup"
repository = "https://github.com/cve-search/vulnerability-lookup"
documentation = "https://vulnerability.circl.lu/documentation"

[tool.poetry.scripts]
start = "bin.start:main"
stop = "bin.stop:main"
update = "bin.update:main"
shutdown = "bin.shutdown:main"
run_backend = "bin.run_backend:main"
start_website = "bin.start_website:main"
restart_website = "bin.restart_website:main"

cisa_known_exploited = "bin.cisa_known_exploited:main"
nvd_importer = "bin.nvd_fetcher:main"
cvelist_importer = "bin.cvelist:main"
gsd_importer = "bin.gsd:main"
pysec_importer = "bin.pysec:main"
jvndb_importer = "bin.jvndb:main"
github_importer = "bin.github:main"
tailscale_importer = "bin.tailscale:main"
variot_importer = "bin.variot:main"
ossf_malicious_importer = "bin.ossf_malicious:main"
csaf_certbund_importer = "bin.csaf_certbund:main"
csaf_siemens_importer = "bin.csaf_siemens:main"
csaf_redhat_importer = "bin.csaf_redhat:main"
csaf_cisa_importer = "bin.csaf_cisa:main"
csaf_cisco_importer = "bin.csaf_cisco:main"
csaf_sick_importer = "bin.csaf_sick:main"
csaf_ox_importer = "bin.csaf_ox:main"
csaf_nozominetworks_importer = "bin.csaf_nozominetworks:main"
dump = "bin.dump:main"

[tool.poetry.dependencies]
python = "^3.10"
redis = {version = "^5.0.8", extras = ["hiredis"]}
flask-restx = "^1.3.0"
werkzeug = "^3.0.4"
gunicorn = {version = "^23.0.0", extras = ["gevent"]}
requests = "^2.32.3"
gitpython = "^3.1.43"
bootstrap-flask = "^2.4.0"
pyyaml = "^6.0.2"
orjson = "^3.10.7"
feedgen = "^1.0.0"
sqlalchemy = "^2.0.35"
flask-principal = "^0.4.0"
flask-login = "^0.6.3"
flask-sqlalchemy = "^3.1.1"
psycopg2-binary = "^2.9.9"
flask-migrate = "^4.0.7"
validate-email = "^1.3"
flask-wtf = "^1.2.1"
wtforms = "^3.1.2"
email-validator = "^2.2.0"
flask-paginate = "^2024.4.12"
pyotp = "^2.9.0"
qrcode = "^7.4.2"
pyvariot = "^0.2.0"
markdown = "^3.7"
the-big-username-blacklist = "^1.5.4"
cvss = "^3.1"
xmltodict = "^0.14.0"
feedparser = "^6.0.11"
pycountry = "^24.6.1"
pymispwarninglists = "^1.5"

[tool.poetry.group.dev.dependencies]
ipython = "^8.26.0"
pre-commit = "^3.8.0"
mypy = "^1.11.2"
types-redis = "^4.6.0.20240819"
types-requests = "^2.32.0.20240712"
types-pyyaml = "^6.0.12.20240808"
pytest = "^8.3.2"
pytest-env = "^1.1.3"
pyvulnerabilitylookup = "^1.4.0"
types-xmltodict = "^0.13.0.3"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx-book-theme = "^1.0.1"
sphinxcontrib-openapi = "^0.8.1"
pydot = "^1.4.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = false
strict_optional = true
no_implicit_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true

show_error_context = true
pretty = true


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
env = [
    "TESTING=gh_action",
]
