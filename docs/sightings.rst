Sightings
=========

Presentation
------------

Users have the possibility to add observations to vulnerabilities with different types of sightings, such as:
*seen*, *exploited*, *not exploited*, *confirmed*, *not confirmed*, *patched*, and *not patched*.

.. list-table::
   :header-rows: 1
   :widths: auto

   * - Type
     - Description
     - Negative/Opposite
   * - seen
     - The vulnerability was mentioned, discussed, or seen somewhere by the user.
     - -
   * - confirmed
     - The vulnerability is confirmed from an analyst perspective.
     - X
   * - exploited
     - This vulnerability was exploited and seen by the user reporting the sighting.
     - X
   * - patched
     - This vulnerability was successfully patched by the user reporting the sighting.
     - X


Color code
----------

Color code used in the application:

====================  ================
Sighting Type          Color Code
====================  ================
``exploited``          ``hsl(0, 70%, 35%)`` (Darker Red)
``confirmed``          ``hsl(0, 70%, 50%)`` (Medium Red)
``seen``               ``hsl(0, 70%, 65%)`` (Lighter Red)
``patched``            ``hsl(120, 50%, 50%)`` (Green)
``not-confirmed``      ``hsl(0, 0%, 35%)`` (Darker Grey)
``not-exploited``      ``hsl(0, 0%, 50%)`` (Medium Grey)
``not-patched``        ``hsl(0, 0%, 65%)`` (Lighter Grey)
====================  ================

Example
-------

Example of a sighting object:

.. code-block:: json

    {
        "uuid": "f6ed692b-2656-4ce0-bcf1-eaf12dfe281d",
        "vulnerability_lookup_origin": "1a89b78e-f703-45f3-bb86-59eb712668bd",
        "author": "8dfa6142-8c6d-4072-953e-71c85404aefb",
        "type": "seen",
        "source": "https://infosec.exchange/users/cve/statuses/113389560858828548",
        "vulnerability": "CVE-2024-10312",
        "creation_timestamp": "2024-10-29T08:36:31.492184Z"
    }


A source is not necessary an URL. It can be any string, for example the UUID of a MISP event.
Examples: https://vulnerability.circl.lu/sightings/?query=MISP

Automation
----------

Realistically, sightings are more likely to be created programmatically, for instance,
based on observations gathered from social networks, network captures, etc.

To track vulnerabilities from data found on the Fediverse, you can use
`FediVuln <https://github.com/CIRCL/FediVuln>`_â€”a client specifically designed to gather
vulnerability-related information from the Fediverse and push the information to a
Vulnerability-Lookup instance.

`VulnerabilityLookupSighting <https://github.com/MISP/VulnerabilityLookupSighting>`_
is a client that retrieves vulnerability observations from a
MISP server and pushes them to a Vulnerability-Lookup instance.
