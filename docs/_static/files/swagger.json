{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
        "/api/browse": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the known vendors",
                "operationId": "get_vendors",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/browse/{vendor}": {
            "parameters": [
                {
                    "name": "vendor",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the known products for a vendor",
                "operationId": "get_vendor_products",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/bundle/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BundlesList"
                            }
                        }
                    }
                },
                "summary": "List all bundles",
                "operationId": "list_bundles",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "UUID of the bundle."
                    },
                    {
                        "name": "author",
                        "in": "query",
                        "type": "string",
                        "description": "Author (login) of the bundle."
                    },
                    {
                        "name": "vuln_id",
                        "in": "query",
                        "type": "string",
                        "description": "Id of a vulnerability referenced by the bundle."
                    },
                    {
                        "name": "meta",
                        "in": "query",
                        "type": "string",
                        "description": "Query for the meta JSON field. Example: meta=[{'tags': ['tcp']}]"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of elements to return.",
                        "default": 10
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "bundle"
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BundlesList"
                            }
                        }
                    },
                    "400": {
                        "description": "JSON validation failed or incorrect payload to instantiate a bundle."
                    },
                    "403": {
                        "description": "Administrator permission required."
                    }
                },
                "description": "Create a bundle.",
                "operationId": "post_bundles_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Bundle"
                        }
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "bundle"
                ]
            }
        },
        "/api/bundle/{bundle_uuid}": {
            "parameters": [
                {
                    "name": "bundle_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Bundle"
                        }
                    },
                    "404": {
                        "description": "Bundle not found."
                    }
                },
                "description": "Get a bundle with its UUID.",
                "operationId": "get_bundle_item",
                "parameters": [
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "bundle"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "description": "Administrator permission required or not the author of the bundle."
                    },
                    "404": {
                        "description": "Bundle not found."
                    }
                },
                "summary": "Endpoint for deleting a bundle",
                "description": "Delete a bundle.\nOnly an admin can delete a bundle.",
                "operationId": "delete_bundle_item",
                "tags": [
                    "bundle"
                ]
            }
        },
        "/api/comment/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CommentsList"
                            }
                        }
                    }
                },
                "summary": "List all comments",
                "operationId": "list_comments",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "UUID of the comment."
                    },
                    {
                        "name": "vuln_id",
                        "in": "query",
                        "type": "string",
                        "description": "Vulnerability related to the comment."
                    },
                    {
                        "name": "author",
                        "in": "query",
                        "type": "string",
                        "description": "Author of the comment."
                    },
                    {
                        "name": "meta",
                        "in": "query",
                        "type": "string",
                        "description": "Query for the meta JSON field. Example: meta=[{'tags': ['PoC']}]"
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of elements to return.",
                        "default": 10
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "comment"
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CommentsList"
                            }
                        }
                    },
                    "400": {
                        "description": "JSON validation failed or incorrect payload to instantiate a comment."
                    },
                    "403": {
                        "description": "Commenter permission required or not the author of the comment."
                    }
                },
                "summary": "Create a new comment related to a security advisory (vulnerability)",
                "description": "Create a comment related to a security advisory.",
                "operationId": "post_comments_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "comment"
                ]
            }
        },
        "/api/comment/{comment_uuid}": {
            "parameters": [
                {
                    "name": "comment_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Comment"
                        }
                    },
                    "404": {
                        "description": "Comment not found."
                    }
                },
                "description": "Get a comment with its UUID.",
                "operationId": "get_comment_item",
                "parameters": [
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "comment"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "description": "Commenter permission required or not the author of the comment."
                    },
                    "404": {
                        "description": "Comment not found."
                    }
                },
                "summary": "Endpoint for deleting a comment",
                "description": "Delete a comment.",
                "operationId": "delete_comment_item",
                "tags": [
                    "comment"
                ]
            }
        },
        "/api/configInfo": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get non-sensitive information about the configuration of the system.",
                "operationId": "get_config_info",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/cve/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "400": {
                        "description": "JSON validation failed."
                    },
                    "403": {
                        "description": "Reporter permission required."
                    },
                    "422": {
                        "description": "Not possible to edit a vulnerability from the requested source."
                    }
                },
                "summary": "Endpoint for creating and editing vulnerabilities in the local source",
                "description": "Create a vulnerability with the CVE version 5 format.",
                "operationId": "post_vulnerabilities_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "api"
                ]
            }
        },
        "/api/cve/{vulnerability_id}": {
            "parameters": [
                {
                    "name": "vulnerability_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get a vulnerability.",
                "operationId": "get_vulnerability",
                "tags": [
                    "api"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "description": "Admin permission required."
                    },
                    "422": {
                        "description": "Not possible to edit a vulnerability from the requested source."
                    }
                },
                "summary": "Endpoint for deleting a vulnerability",
                "description": "Delete a vulnerability from the local source.\nWe only accept to delete vulnerabilities from the local source.",
                "operationId": "delete_vulnerability",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/dbInfo": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get more information about the current databases in use and when it was updated",
                "operationId": "get_info",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/epss/{vulnerability_id}": {
            "parameters": [
                {
                    "name": "vulnerability_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "404": {
                        "description": "Problem when retrieving EPSS."
                    }
                },
                "description": "Experimental - Get the EPSS score of a vulnerability.",
                "operationId": "get_epss_item",
                "tags": [
                    "epss"
                ]
            }
        },
        "/api/last": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the last CVEs",
                "operationId": "get_last",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/search/{vendor}/{product}": {
            "parameters": [
                {
                    "name": "vendor",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "product",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the the vulnerabilities per vendor and a specific product",
                "operationId": "get_vendor_product_vulnerabilities",
                "tags": [
                    "api"
                ]
            }
        },
        "/api/sighting/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SightingsList"
                            }
                        }
                    }
                },
                "summary": "List all sightings",
                "operationId": "list_sightings",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "UUID of the sighting."
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "Type of sightings:\n     - Seen: The vulnerability was mentioned, discussed, or seen somewhere by the user.\n     - Exploited: This vulnerability was exploited and seen by the user reporting the sighting.\n     - Not exploited: This vulnerability was not exploited or seen by the user reporting the sighting.\n     - Confirmed: The vulnerability is confirmed from an analyst perspective.\n     - Not confirmed: The user expresses doubt about the veracity of the vulnerability.\n     - Patched: This vulnerability was successfully patched by the user reporting the sighting.\n     - Not patched: This vulnerability was not successfully patched by the user reporting the sighting.",
                        "enum": [
                            "seen",
                            "exploited",
                            "not-exploited",
                            "confirmed",
                            "not-confirmed",
                            "patched",
                            "not-patched"
                        ]
                    },
                    {
                        "name": "vuln_id",
                        "in": "query",
                        "type": "string",
                        "description": "Vulnerability related to the sighting."
                    },
                    {
                        "name": "author",
                        "in": "query",
                        "type": "string",
                        "description": "Author of the sighting."
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "sighting"
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SightingsList"
                            }
                        }
                    },
                    "400": {
                        "description": "JSON validation failed or incorrect payload to instantiate a sighting."
                    }
                },
                "summary": "Create a new sighting",
                "description": "Create a new sighting.",
                "operationId": "post_sightings_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Sighting"
                        }
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "sighting"
                ]
            }
        },
        "/api/sighting/{sighting_uuid}": {
            "parameters": [
                {
                    "name": "sighting_uuid",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/Sighting"
                        }
                    },
                    "404": {
                        "description": "Sighting not found."
                    }
                },
                "description": "Get a sighting with its UUID.",
                "operationId": "get_sighting_item",
                "parameters": [
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "sighting"
                ]
            }
        },
        "/api/user/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UsersList"
                            }
                        }
                    },
                    "403": {
                        "description": "Admin permission required."
                    }
                },
                "summary": "List all users",
                "description": "Only available to administrators.",
                "operationId": "list_users",
                "parameters": [
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UserFull"
                        }
                    },
                    "201": {
                        "description": "Success."
                    }
                },
                "summary": "Create a non-admin user",
                "description": "Create a non-admin user.\nThe user will be active but must have to confirm the account with the email sent by the instance.",
                "operationId": "post_users_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "login": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "organisation": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/api/user/api_key": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/UserFull"
                        }
                    },
                    "403": {
                        "description": "Wrong API key submitted."
                    },
                    "404": {
                        "description": "User not found."
                    }
                },
                "summary": "Regenerating the API key of the authenticated user with the current API key",
                "description": "Regenerating the API key of the authenticated user with the current API key.",
                "operationId": "post_user_new_api_key",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/API%20Key"
                        }
                    },
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/api/user/me": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success.",
                        "schema": {
                            "$ref": "#/definitions/UserFull"
                        }
                    },
                    "404": {
                        "description": "User not found."
                    }
                },
                "summary": "Get information about the currently authenticated user",
                "description": "Get information about the currently authenticated user.",
                "operationId": "get_user_self",
                "parameters": [
                    {
                        "name": "X-Fields",
                        "in": "header",
                        "type": "string",
                        "format": "mask",
                        "description": "An optional fields mask"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/api/user/{user_id}": {
            "parameters": [
                {
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "type": "integer"
                }
            ],
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "description": "Administrator permission required or not the current user."
                    },
                    "404": {
                        "description": "User not found."
                    }
                },
                "summary": "Endpoint for deleting a user",
                "description": "Delete a user.",
                "operationId": "delete_user_item",
                "tags": [
                    "user"
                ]
            }
        },
        "/configInfo": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get non-sensitive information about the configuration of the system.",
                "operationId": "get_config_info",
                "tags": [
                    "default"
                ]
            }
        },
        "/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get more information about the current databases in use and when it was updated",
                "operationId": "get_info",
                "tags": [
                    "default"
                ]
            }
        },
        "/last": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the last CVEs",
                "operationId": "get_last",
                "tags": [
                    "default"
                ]
            }
        },
        "/last/{number}": {
            "parameters": [
                {
                    "name": "number",
                    "in": "path",
                    "required": true,
                    "type": "integer"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the last CVEs",
                "operationId": "get_last",
                "tags": [
                    "default"
                ]
            }
        },
        "/last/{source}": {
            "parameters": [
                {
                    "name": "source",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the last CVEs",
                "operationId": "get_last",
                "tags": [
                    "default"
                ]
            }
        },
        "/last/{source}/{number}": {
            "parameters": [
                {
                    "name": "source",
                    "in": "path",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "number",
                    "in": "path",
                    "required": true,
                    "type": "integer"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get the last CVEs",
                "operationId": "get_last",
                "tags": [
                    "default"
                ]
            }
        },
        "/redis_up": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Check if redis is up and running",
                "operationId": "get_redis_up",
                "tags": [
                    "default"
                ]
            }
        },
        "/vulnerability/": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "400": {
                        "description": "JSON validation failed."
                    },
                    "403": {
                        "description": "Reporter permission required."
                    },
                    "422": {
                        "description": "Not possible to edit a vulnerability from the requested source."
                    }
                },
                "summary": "Endpoint for creating and editing vulnerabilities in the local source",
                "description": "Create a vulnerability with the CVE version 5 format.",
                "operationId": "post_vulnerabilities_list",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "tags": [
                    "default"
                ]
            }
        },
        "/vulnerability/{vulnerability_id}": {
            "parameters": [
                {
                    "name": "vulnerability_id",
                    "in": "path",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get a vulnerability.",
                "operationId": "get_vulnerability",
                "tags": [
                    "default"
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "403": {
                        "description": "Admin permission required."
                    },
                    "422": {
                        "description": "Not possible to edit a vulnerability from the requested source."
                    }
                },
                "summary": "Endpoint for deleting a vulnerability",
                "description": "Delete a vulnerability from the local source.\nWe only accept to delete vulnerabilities from the local source.",
                "operationId": "delete_vulnerability",
                "tags": [
                    "default"
                ]
            }
        }
    },
    "info": {
        "title": "Vulnerability Lookup API",
        "version": "2.0.0",
        "description": "<a href='https://www.circl.lu' rel='noreferrer' target='_blank'><img src='https://www.circl.lu/assets/images/circl-logo.png' /></a><br />API to query <a href='https://github.com/cve-search/vulnerability-lookup' rel='noreferrer' target='_blank'>Vulnerability Lookup</a>.<br /><br />Back to the <a href='/'>main page</a>.",
        "license": {
            "name": "GNU Affero General Public License version 3",
            "url": "https://www.gnu.org/licenses/agpl-3.0.html"
        }
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "apikey": {
            "type": "apiKey",
            "in": "header",
            "name": "X-API-KEY"
        }
    },
    "security": [
        {
            "apikey": []
        }
    ],
    "tags": [
        {
            "name": "default",
            "description": "default operations"
        },
        {
            "name": "api",
            "description": "core API operations"
        },
        {
            "name": "comment",
            "description": "comment related operations"
        },
        {
            "name": "user",
            "description": "user related operations"
        },
        {
            "name": "bundle",
            "description": "bundle related operations"
        },
        {
            "name": "sighting",
            "description": "sighting related operations"
        },
        {
            "name": "epss",
            "description": "EPSS related operations"
        }
    ],
    "definitions": {
        "Comment": {
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "Comment id."
                },
                "vulnerability_lookup_origin": {
                    "type": "string",
                    "description": "UUID of the Vulnerability Lookup origin instance.",
                    "readOnly": true,
                    "default": "1a89b78e-f703-45f3-bb86-59eb712668bd"
                },
                "title": {
                    "type": "string",
                    "description": "Comment id."
                },
                "description": {
                    "type": "string",
                    "description": "Description."
                },
                "description_format": {
                    "type": "string",
                    "description": "Description format (markdown or text)."
                },
                "vulnerability": {
                    "type": "string",
                    "description": "Vulnerability id."
                },
                "creation_timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time of the comment.",
                    "readOnly": true
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated time of the comment.",
                    "readOnly": true
                },
                "related_vulnerabilities": {
                    "type": "array",
                    "description": "One or more vulnerability references (CVE ID, GHSA-ID, PYSEC ID, etc.) for this comment.",
                    "items": {
                        "type": "string"
                    }
                },
                "meta": {
                    "type": "object",
                    "description": "Zero or more meta-fields."
                },
                "author": {
                    "readOnly": true,
                    "allOf": [
                        {
                            "$ref": "#/definitions/User"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "User": {
            "properties": {
                "login": {
                    "type": "string",
                    "description": "Login of the user.",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user.",
                    "readOnly": true
                },
                "uuid": {
                    "type": "string",
                    "description": "UUID of the user.",
                    "readOnly": true
                }
            },
            "type": "object"
        },
        "CommentsList": {
            "properties": {
                "metadata": {
                    "description": "Metada related to the result.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/metadata"
                        }
                    ]
                },
                "data": {
                    "type": "array",
                    "description": "List of comments.",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                }
            },
            "type": "object"
        },
        "metadata": {
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Total number of the items of the data.",
                    "readOnly": true
                },
                "offset": {
                    "type": "integer",
                    "description": "Position of the first element of the data from the total data amount.",
                    "readOnly": true
                },
                "limit": {
                    "type": "integer",
                    "description": "Requested limit data.",
                    "readOnly": true
                }
            },
            "type": "object"
        },
        "UserFull": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "User id."
                },
                "login": {
                    "type": "string",
                    "description": "User login."
                },
                "name": {
                    "type": "string",
                    "description": "User name."
                },
                "organisation": {
                    "type": "string",
                    "description": "User organisation."
                },
                "email": {
                    "type": "string",
                    "description": "User email."
                },
                "apikey": {
                    "type": "string",
                    "description": "User API key.",
                    "readOnly": true
                },
                "is_admin": {
                    "type": "boolean",
                    "description": "Boolean specifying whether the user is administrator."
                },
                "is_reporter": {
                    "type": "boolean",
                    "description": "Boolean specifying whether the user is reporter."
                },
                "is_commenter": {
                    "type": "boolean",
                    "description": "Boolean specifying whether the user is commenter."
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time of the user.",
                    "readOnly": true
                },
                "last_seen": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last seen time of the user.",
                    "readOnly": true
                }
            },
            "type": "object"
        },
        "API Key": {
            "properties": {
                "apikey": {
                    "type": "string",
                    "description": "The current API key of the user."
                }
            },
            "type": "object"
        },
        "UsersList": {
            "properties": {
                "metadata": {
                    "description": "Metada related to the result.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/metadata"
                        }
                    ]
                },
                "data": {
                    "type": "array",
                    "description": "List of users.",
                    "items": {
                        "$ref": "#/definitions/UserFull"
                    }
                }
            },
            "type": "object"
        },
        "Bundle": {
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "Bundle id."
                },
                "vulnerability_lookup_origin": {
                    "type": "string",
                    "description": "UUID of the Vulnerability Lookup origin instance.",
                    "readOnly": true,
                    "default": "1a89b78e-f703-45f3-bb86-59eb712668bd"
                },
                "name": {
                    "type": "string",
                    "description": "Bundle id."
                },
                "description": {
                    "type": "string",
                    "description": "Description."
                },
                "creation_timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated time of the bundle.",
                    "readOnly": true
                },
                "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Updated time of the bundle.",
                    "readOnly": true
                },
                "related_vulnerabilities": {
                    "type": "array",
                    "description": "One or more vulnerability references (CVE ID, GHSA-ID, PYSEC ID, etc.) for this bundle.",
                    "items": {
                        "type": "string"
                    }
                },
                "meta": {
                    "type": "object",
                    "description": "Zero or more meta-fields."
                },
                "author": {
                    "readOnly": true,
                    "allOf": [
                        {
                            "$ref": "#/definitions/User"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "BundlesList": {
            "properties": {
                "metadata": {
                    "description": "Metada related to the result.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/metadata"
                        }
                    ]
                },
                "data": {
                    "type": "array",
                    "description": "List of bundles.",
                    "items": {
                        "$ref": "#/definitions/Bundle"
                    }
                }
            },
            "type": "object"
        },
        "Sighting": {
            "properties": {
                "uuid": {
                    "type": "string",
                    "description": "Sighting UUID.",
                    "readOnly": true
                },
                "vulnerability_lookup_origin": {
                    "type": "string",
                    "description": "UUID of the Vulnerability Lookup origin instance.",
                    "readOnly": true,
                    "default": "1a89b78e-f703-45f3-bb86-59eb712668bd"
                },
                "creation_timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation time of the sighting.",
                    "readOnly": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the sighting."
                },
                "source": {
                    "type": "string",
                    "description": "The source of the sighting (Fediverse status URI, link, tool, etc.)."
                },
                "vulnerability": {
                    "type": "string",
                    "description": "Vulnerability id."
                },
                "author": {
                    "readOnly": true,
                    "allOf": [
                        {
                            "$ref": "#/definitions/User"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "SightingsList": {
            "properties": {
                "metadata": {
                    "description": "Metada related to the result.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/metadata"
                        }
                    ]
                },
                "data": {
                    "type": "array",
                    "description": "List of sightings.",
                    "items": {
                        "$ref": "#/definitions/Sighting"
                    }
                }
            },
            "type": "object"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
