#!/usr/bin/env python3

from __future__ import annotations

import argparse
import json
import logging
from datetime import datetime, timezone

import logging.config

from vulnerabilitylookup import VulnerabilityLookup
from vulnerabilitylookup.default import get_config, get_homedir, safe_create_dir
from website.models import Bundle
from website.models import Comment
from website.models import Sighting
from website.web.bootstrap import application

logging.config.dictConfig(get_config("logging"))

dumps_dir = "dumps"
excluded_sources = ["cisa_known_exploited"]


class Dump:
    def __init__(self) -> None:
        self.vl = VulnerabilityLookup()
        self.root_dumps = get_homedir() / dumps_dir
        safe_create_dir(self.root_dumps)

    def dump(self, feed: str, /) -> None:
        dest_file = self.root_dumps / f"{feed}.ndjson"
        dest_file.unlink(missing_ok=True)
        for vuln in self.vl.get_all(feed, with_meta=True):
            with dest_file.open("a") as f:
                json.dump(vuln, f)

    def dump_comments(self) -> None:
        dest_file = self.root_dumps / "comments.ndjson"
        dest_file.unlink(missing_ok=True)
        with application.app_context():
            for comment in Comment.query.filter():
                with dest_file.open("a") as f:
                    json.dump(comment.to_dict(), f)

    def dump_bundles(self) -> None:
        dest_file = self.root_dumps / "bundles.ndjson"
        dest_file.unlink(missing_ok=True)
        with application.app_context():
            for bundle in Bundle.query.filter():
                with dest_file.open("a") as f:
                    json.dump(bundle.to_dict(), f)

    def dump_sightings(self) -> None:
        dest_file = self.root_dumps / "sightings.ndjson"
        dest_file.unlink(missing_ok=True)
        with application.app_context():
            for bundle in Sighting.query.filter():
                with dest_file.open("a") as f:
                    json.dump(bundle.to_dict(), f)


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Dump vulnerability-lookup storage in NDJSON."
    )
    parser.add_argument(
        "--feed",
        help="Feed to dump.",
        default="",
        choices=[
            "nvd",
            "cvelistv5",
            "pysec",
            "github",
            "gsd",
            "ossf_malicious_packages",
            "csaf_certbund",
            "csaf_siemens",
            "csaf_redhat",
            "csaf_cisa",
            "csaf_cisco",
            "csaf_sick",
            "csaf_nozominetworks",
            "csaf_ox",
            "variot",
            "jvndb",
            "tailscale",
        ],
    )
    parser.add_argument(
        "--all",
        help="Dump all feeds. Default is false",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--index",
        help="Generate an index to publish all the feeds. Default is false.",
        default=False,
        action="store_true",
    )
    parser.add_argument(
        "--comments", help="Export the comments. Default is false.", action="store_true"
    )
    parser.add_argument(
        "--bundles", help="Export the bundles. Default is false.", action="store_true"
    )
    parser.add_argument(
        "--sightings",
        help="Export the sightings. Default is false.",
        action="store_true",
    )
    args = parser.parse_args()
    d = Dump()
    if args.index:
        index = "<html><meta><title>vulnerability-lookup JSON dumps</title></meta><body><ul>"
    if not args.all and args.feed:
        d.dump(args.feed)
    elif args.all:
        vl = VulnerabilityLookup()
        for source in sorted(vl.get_sources()):
            if source in excluded_sources:
                continue
            print(f"Dumping {source} in {dumps_dir}…")
            if args.index:
                index = index + f'\n<li><a href="./{source}.ndjson">{source}</a></li>'
            d.dump(source)
    if args.index and args.all:
        current_date = datetime.now(timezone.utc)
        root_dumps = get_homedir() / dumps_dir
        dest_file = root_dumps / f"index.html"
        dest_file.unlink(missing_ok=True)
        index = index + f"</ul><br/>Generated on {current_date}</body></html>"
        with dest_file.open("w") as f:
            f.write(index)
    if args.comments:
        print("Dumping comments…")
        d.dump_comments()
    if args.bundles:
        print("Dumping bundles…")
        d.dump_bundles()
    if args.sightings:
        print("Dumping sightings…")
        d.dump_sightings()


if __name__ == "__main__":
    main()
